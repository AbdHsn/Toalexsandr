#parse("include/init_var.vm")
import PropTypes from "prop-types"
import React, { useEffect, useRef, useState } from "react"
import { useFormik } from "formik"
import * as Yup from "yup"
import Select from "react-select";
import * as moment from "moment"
import {
  Col,
  Row,
  Modal,
  ModalHeader,
  ModalBody,
  Input,
  FormFeedback,
  Label,
  Form,
} from "reactstrap"
import {
  new${entity.name},
  edit${entity.name},
} from "../../services/needToBeDefined"
import toastr from "toastr"
import "toastr/build/toastr.min.css"
import BtnSaving from "../../components/Common/BtnSaving"
const ${entity.name} = ({
  open,
  modelData,
  onSaveClick,
  onCancelClick,
}) => {

  useEffect(() => {
    //set existing selected value
#foreach($attribute in $entity.attributes )
	#if($attribute.type == "Short")
    modelData && modelData?.$attribute.name != null
      ? set_$attribute.name+Selected({ label: modelData?.$attribute.name, value: modelData?.$attribute.name })
      : set_$attribute.name+Selected("")

	#end
	#if($attribute.type == "Boolean")
    modelData && modelData?.$attribute.name != null
      ? set_$attribute.name+(modelData?.$attribute.name)
      : set_$attribute.name+(false)
	#end
#end


  }, [modelData])

  const [isSaving, setIsSaving] = useState(false)

#foreach($attribute in $entity.attributes )
	#if($attribute.type == "Short")
  const [_$attribute.name+Selected, set_$attribute.name+Selected] = useState("")
  const [_$attribute.name+SelectItems, set_$attribute.name+SelectItems] = useState([])
	#end
	#if($attribute.type == "Boolean")
  const [$attribute.name, set_$attribute.name] = useState(false)
	#end
#end

  const validation = useFormik({
    // enableReinitialize : use this flag when initial values needs to be changed
    enableReinitialize: true,

    initialValues: {
#foreach($attribute in $entity.attributes )
	#if($attribute.type == "long")
      $attribute.name: (modelData && modelData.$attribute.name) || 0,
	#end
	#if($attribute.type == "Byte")
      $attribute.name: (modelData && modelData.$attribute.name) || "",
	#end
	#if($attribute.type == "Short")
      $attribute.name: (modelData && modelData.$attribute.name) || "",
	#end
	#if($attribute.type == "String")
      $attribute.name: (modelData && modelData.$attribute.name) || "",
	#end
	#if($attribute.type == "Date")
      $attribute.name: (modelData && modelData?.$attribute.name &&
          moment(modelData?.$attribute.name).format("YYYY-MM-DD")) || null,
	#end
	#if($attribute.type == "Boolean")
      $attribute.name: (modelData && modelData.$attribute.name) || false,
	#end
#end
    },
    validationSchema: Yup.object({
#foreach($attribute in $entity.attributes )
	#if($attribute.type == "long")
      // $attribute.name: Yup.string().required("$attribute.name is required"),
	#end
	#if($attribute.type == "Byte")
      // $attribute.name: Yup.string().required("$attribute.name is required"),
	#end
	#if($attribute.type == "Short")
      // $attribute.name: Yup.string().required("$attribute.name is required"),
	#end
	#if($attribute.type == "String")
      // $attribute.name: Yup.string().required("$attribute.name is required"),
	#end
	#if($attribute.type == "Date")
      // $attribute.name: Yup.string().required("$attribute.name is required"),
	#end
	#if($attribute.type == "Boolean")
      // $attribute.name: Yup.string().required("$attribute.name is required"),
	#end
#end
    }),

    onSubmit: values => {
      console.log("add-update save..01", values)

      const submitModel = {
#foreach($attribute in $entity.attributes )
    #if ($attribute.type == "Short")
		$attribute.name: _$attribute.name+Selected.value,
	#end
	#if ($attribute.type == "Boolean")
		$attribute.name: $attribute.name,
    #else
    	$attribute.name: values.$attribute.name,
    #end
#end
      }

      if (submitModel && submitModel?.id > 0) {
        setIsSaving(true)
        edit${entity.name}(submitModel?.id, submitModel)
          .then(res => {
            console.log("submit model create response: ", res)
            if (res.data.id > 0) {
              toastr.success("Data successfully updated.", "NINETRAX")
              setIsSaving(false)
              validation.resetForm()
              onSaveClick(res.data)
              onCancelClick(false)
            } else {
              setIsSaving(false)
              toastr.warning("Failed to update data.", "NINETRAX")
            }
          })
          .catch(error => {
            setIsSaving(false)
            toastr.error("Failed to process data.", "NINETRAX")
          })
      } else {
        setIsSaving(true)
        new${entity.name}(submitModel)
          .then(res => {
            console.log("submit model update response: ", res)
            if (res.data.id > 0) {
              toastr.success("Data successfully created.", "NINETRAX")
              setIsSaving(false)
              validation.resetForm()
              onSaveClick(res.data)
              onCancelClick(false)
            } else {
              setIsSaving(false)
              toastr.warning("Failed to create data.", "NINETRAX")
            }
          })
          .catch(error => {
            setIsSaving(false)
            toastr.error("Failed to process data.", "NINETRAX")
          })
      }
    },
  })

  return (
    <>
      <Modal isOpen={open} className="modal-dialog modal-lg">
        <ModalHeader tag="h4">
          {modelData?.id > 0 ? "Update ${entity.name}" : "New ${entity.name}"}
        </ModalHeader>
        <ModalBody>
          <Form
            onSubmit={e => {
              e.preventDefault()
              validation.handleSubmit()
              return false
            }}
          >
            <Row form>
              <Col className="col-12">
#foreach($attribute in $entity.attributes )
	#if($attribute.type == "long")
			#if($attribute.name == "id")
                <div className="mb-3">
                  {/* <Label className="form-label">Id</Label> */}
                  <Input
                    id="id"
                    name="id"
                    type="number"
                    placeholder="Id"
                    hidden={true}
                    defaultValue={validation.values.id || 0}
                  />
                </div>
			    #else
                <div className="mb-3">
                  <Label className="form-label">$attribute.name</Label>
                  <Input
                    id="$attribute.name"
                    name="$attribute.name"
                    type="number"
                    placeholder="$attribute.name"
                    onChange={validation.handleChange}
                    onBlur={validation.handleBlur}
                    value={validation.values.$attribute.name || ""}
                    invalid={
                      validation.touched.$attribute.name &&
                      validation.errors.$attribute.name
                        ? true
                        : false
                    }
                  />
                  {validation.touched.$attribute.name &&
                  validation.errors.$attribute.name ? (
                    <FormFeedback type="invalid">
                      {validation.errors.$attribute.name}
                    </FormFeedback>
                  ) : null}
                </div>
			#end
	#end
	#if($attribute.type == "Byte")
                <div className="mb-3">
                  <Label className="form-label">$attribute.name</Label>
                  <Input
                    id="$attribute.name"
                    name="$attribute.name"
                    type="textarea"
                    placeholder="$attribute.name"
                    maxLength="225"
                    rows="3"
                    onChange={validation.handleChange}
                    onBlur={validation.handleBlur}
                    value={validation.values.$attribute.name || ""}
                    invalid={
                      validation.touched.$attribute.name &&
                      validation.errors.$attribute.name
                        ? true
                        : false
                    }
                  />
                  {validation.touched.$attribute.name &&
                  validation.errors.$attribute.name ? (
                    <FormFeedback type="invalid">
                      {validation.errors.$attribute.name}
                    </FormFeedback>
                  ) : null}
                </div>
	#end
	#if($attribute.type == "Short")		 
   				<div className="mb-3">
                  <Label>$attribute.name</Label>
                  <Select
                    id="$attribute.name"
                    name="$attribute.name"
                    type="text"
                    onChange={e => {
                      set_$attribute.name+Selected({
						  label: e.label,
                          value: e.value,
						})
                    }}
                    onBlur={validation.handleBlur}
                    options={_$attribute.name+SelectItems}
       				defaultValue={_$attribute.name+Selected}
                    className="basic-single"
                    classNamePrefix="select"
                    placeholder="Select $attribute.name"
                    isClearable={false}
                    isSearchable={true}
                    isLoading={false}
                    loadingMessage={() => "Fetching Data..."}
                    noOptionsMessage={() => "No Data Found."}
                  />
                  {validation.touched.$attribute.name && validation.errors.$attribute.name ? (
                    <FormFeedback type="invalid">
                      {validation.errors.$attribute.name}
                    </FormFeedback>
                  ) : null}
                </div>
	#end
	#if($attribute.type == "String")
                <div className="mb-3">
                  <Label className="form-label">$attribute.name</Label>
                  <Input
                    id="$attribute.name"
                    name="$attribute.name"
                    type="text"
                    placeholder="$attribute.name"
                    onChange={validation.handleChange}
                    onBlur={validation.handleBlur}
                    value={validation.values.$attribute.name || ""}
                    invalid={
                      validation.touched.$attribute.name &&
                      validation.errors.$attribute.name
                        ? true
                        : false
                    }
                  />
                  {validation.touched.$attribute.name &&
                  validation.errors.$attribute.name ? (
                    <FormFeedback type="invalid">
                      {validation.errors.$attribute.name}
                    </FormFeedback>
                  ) : null}
                </div>
	#end
	#if($attribute.type == "Date")
                <div className="mb-3">
                  <Label className="form-label">$attribute.name</Label>
                  <Input
                    id="$attribute.name"
                    name="$attribute.name"
                    type="date"
  					pattern="\d{4}-\d{2}-\d{2}"
                    placeholder="$attribute.name"
                    onChange={validation.handleChange}
                    onBlur={validation.handleBlur}
                    value={validation.values.$attribute.name || ""}
                    invalid={
                      validation.touched.$attribute.name &&
                      validation.errors.$attribute.name
                        ? true
                        : false
                    }
                  />
                  {validation.touched.$attribute.name &&
                  validation.errors.$attribute.name ? (
                    <FormFeedback type="invalid">
                      {validation.errors.$attribute.name}
                    </FormFeedback>
                  ) : null}
                </div>
	#end
	#if($attribute.type == "Boolean")
                <div className="mb-3">
                <div className="form-check form-check-end">
                  <input
                    className="form-check-input"
                    type="checkbox"
                    value=""
                    id="chk$attribute.name"
                    defaultChecked={$attribute.name}
                    onChange={e => {
                      set_$attribute.name+(e.target.checked)
                    }}
                  />
                  <label className="form-check-label" htmlFor="chk$attribute.name">
                    $attribute.name
                  </label>
                </div>
                </div>
	#end
#end

               
              </Col>
            </Row>
            <Row>
              <Col>
                <div className="text-end">
                  {isSaving === true ? (
                    <BtnSaving isSaving={isSaving} />
                  ) : (
                    <button
                      type="submit"
                      className="btn btn-outline-success w-xs"
                    >
                      <i className="bx bx-save"></i> SAVE
                    </button>
                  )}{" "}
                  <button
                    onClick={() => onCancelClick(false)}
                    type="button"
                    className="btn btn-danger ml-5"
                  >
                    CANCEL
                  </button>
                </div>
              </Col>
            </Row>
          </Form>
        </ModalBody>
      </Modal>
    </>
  )
}

${entity.name}.propTypes = {
  onSaveClick: PropTypes.func,
  onCancelClick: PropTypes.func,
  open: PropTypes.bool,
  modelData: PropTypes.object,
}

export default ${entity.name}