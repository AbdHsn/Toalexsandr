PAWTrackersView {
id : long {@Id};
pawNumber: string;
location: string;
description: string;
par: string;
dateReceived: date;
dateAcknowledged: date;
woNumber: string;
dateToPar: date;
status: string;
annex: string;
specItem: string;
title: string;
validity: string;
pawResponse: string;
}

CCRTrackersView {
id : long {@Id};
ccrNumber: string;
location: string;
fmManager: string;
detailOfComplaint: string;
par: string;
comments: string;
dateReceived: date;
dateAcknowledged: date;
woNumber: string;
dateToPar: date;
status: string;
annex: string;
specItem: string;
title: string;
validity: string;
ccrResponse: string;
}

NCRTrackersView {
id : long {@Id};
ncrNumber: string;
pdrNumber: string;
woNumber: string;
dateIssued: date;
qcInspector: string;
nonConformanceSummary: string;
dateCAPDue: date;
status: string;
annex: string;
specItem: string;
title: string;
responsiblePerson: string;
responsibleSub: string;
}

CDRTrackersView {
id : long {@Id};
cdrNumber: string;
dateReceived: date;
discrepancy: string;
functionalManager: string;
responseDueDate: date;
memoNumber: string;
fmResponse: string;
responseDate: date;
dateClosed: date;
status: string;
notes: string;
}



DropDownMenuView{ 
id : long {@Id};
causeCode: string;
rootCause:string;
correctiveAction: string;
qcstatus: string;
pdrstatusMenu: string;
pawstatusMenu: string;
pawrating: string;
pawAssessment: string;
ccrstatusMenu: string;
validity: string;
qctechs: string;
mptPar: string;
mptAsgnCode: string;
jaxPar: string;
pawunsat: string;
pawrootCause: string;
fmBldgManager: string;
estimators: string;
}

DirectoryNamesView{ 
id : long {@Id};
personName: string;
personTitle:string;
baseOfOperation: string;
}


UserLoginView{
id : long {@Id};
unique_id: string;
userFN: string;
userLN: string;
loginID: string;
password: string;
workSite: string;
accessLevel: string;
dbAccess: boolean;
readRecordsOnly: boolean;
editRecordsOnly: boolean;
adminRights: string;
resetPW: string;
addUsers: boolean;
deleteRecords: boolean;
addRecords: boolean;
securityQ1: string;
securityQ1A: string;
securityQ2: string;
securityQ2A: string;
securityQ3: string;
securityQ3A: string;
dbMasterUnlock: boolean;
canImportFiles: boolean;
canChangeDBLocation: boolean;
canBackupDB: boolean;
activateAutoLogOut: boolean;
dbUpdateNotification: boolean;
}


MenuNamingConventionView{
id : long {@Id};

trackerName: string;
abrvName: string;
prefix: string;
numberSeq: long;
postfix: string;
namingConv: string;
lastUsedConv: string;
nextToUseConv: string;
active: string;
group: string;
}

UsersView{
id : long {@Id};
firstName: string;
lastName: string;
fullName: string;
uniqueId: string;
qualityInspectors: boolean;
assosicateInspectors: boolean;
planEstimateInspectors: boolean;
customerInspectors: boolean;
aor: string;
positionTitle: string;
email: string;
accessType: string;
activeStatus: boolean;
fullAdminRights: boolean;
editRights: boolean;
deleteRights: boolean;
viewRights: boolean;
importRights: boolean;
activateAutologout: boolean;
loginId: string;
password: string;
resetPassword: boolean;
securityQuesOne: string;
securityAnsOne: string;
dateAccessGranted: date;
dateAccessRemoved: date;
comments: string;
}




#SELECT * FROM DropDownMenuView
#SELECT * FROM DirectoryNamesView
#SELECT * FROM UserLoginView
#select * from MenuNamingConventionView
#SELECT * FROM UsersView

import DirectoryNamesAddUpdate from "./add-update"
import DeleteModal from "../../components/Common/DeleteModal"

  /////
  const [modal, setModal] = useState(false)
  const [modelData, setModelData] = useState({})
  const [deleteModal, setDeleteModal] = useState(false)
  /////
  
  const onNewClick = () => {
    setModal(true)
    setModelData(null)
  }

  const onEditClick = item => {
    setModal(true)
    setModelData(item)
  }

  const onAttemptDelete = id => {
    if (id > 0) {
      setDeleteModal(true)
      setModelData({ id: id })
    }
  }

  const onDeleteConfirmed = () => {
    if (modelData.id > 0) {
      deleteDirectoryNames(modelData.id)
        .then(res => {
          if (res.data) {
            toastr.success("Selected item successfully deleted.", "NINETRAX")
            setDeleteModal(false)
            loadView()
          } else {
            toastr.warning("Selected item failed to delete.", "NINETRAX")
          }
        })
        .catch(error => {
          toastr.error("Failed to process data.", "NINETRAX")
        })
    } else {
      toastr.error("Can't process request.", "NINETRAX")
    }
  }

////////////
                      <button
                        type="button"
                        className="btn btn-outline-secondary w-xs"
                        onClick={onNewClick}
                      >
                        <i className="bx bx-plus"></i> New
                      </button>
					  
////////

            <button
                                      type="button"
                                      className="btn btn-sm btn-outline-primary ml-2"
                                      onClick={e => onEditClick(item)}
                                      data-toggle="modal"
                                      data-target=".bs-example-modal-center"
                                    >
                                      <i className="far fa-edit"></i> Edit
                                    </button>{" "}
                                    <button
                                      type="button"
                                      className="btn btn-sm btn-outline-danger ml-2"
                                      onClick={() => onAttemptDelete(item.id)}
                                      data-toggle="modal"
                                      data-target=".bs-example-modal-center"
                                    >
                                      <i className="far fa-trash-alt"></i>{" "}
                                      Delete
                                    </button>
									
				 <DeleteModal
                    show={deleteModal}
                    onDeleteClick={() => onDeleteConfirmed()}
                    onCloseClick={() => {
                      setDeleteModal(false)
                      setModelData({})
                    }}
                  />

                  <DirectoryNamesAddUpdate
                    open={modal}
                    modelData={modelData}
                    onSaveClick={item => {
                      console.log("onSaveClick from index called...", item)
                      if (item?.id > 0) {
                        loadView()
                      }
                    }}
                    onCancelClick={setModal}
                  />					



<Row>
        <Col className="col-md-6 col-sm-12"></Col>
		<Col className="col-md-6 col-sm-12"></Col>
</Row>





	#if($attribute.type == "Boolean")
    modelData && modelData?.$attribute.name != null
      ? set_$attribute.name(modelData?.$attribute.name)
      : set_$attribute.name(false)
	#end
	
		#if($attribute.type == "Boolean")
  const [$attribute.name, set_$attribute.name] = useState(false)
	#end
	
		#if($attribute.type == "Boolean")
                <div className="mb-3">
                <div className="form-check form-check-end">
                  <input
                    className="form-check-input"
                    type="checkbox"
                    value=""
                    id="chk$attribute.name"
                    defaultChecked={$attribute.name}
                    onChange={e => {
                      set_$attribute.name(e.target.checked)
                    }}
                  />
                  <label className="form-check-label" htmlFor="chk$attribute.name">
                    $attribute.name
                  </label>
                </div>
                </div>
	#end